import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import { Button } from '@material-ui/core'

function Square(props) {
    return(
        <Button variant="contained"
                color={props.highlight ? primary : ""}
                className="square"
                onClick={props.onClick}>
            {props.value}
        </Button>
    );
}

class Board extends React.Component {
    constructor(props) {
        super(props)
        this.state = {
            next: 'X',
            rows: Array(3).fill(Array(3).fill(null)),
            highlights: Array(3).fill(Array(3).fill(false)),
        };
    }

    clear() {
        this.setState((state) => ({
            ...state,
            highlights: Array(3).fill(Array(3).fill(false)),
            rows: Array(3).fill(Array(3).fill(null)),
        }));
    }

    winner(rows) {
        const lines = [
            [0, 1, 2],
            [3, 4, 5],
            [6, 7, 8],
            [0, 3, 6],
            [1, 4, 7],
            [2, 5, 8],
            [0, 4, 8],
            [2, 4, 6],
        ];
        const cells = rows.reduce((acc, row) => [...acc, ...row]);
        for (const [a, b, c] of lines) {
            if (cells[a] == null) {
                continue;
            }
            if (cells[a] === cells[b] && cells[a] === cells[c]) {
                // flag the winning cells in rows corresponding to our state
                // grid
                const highlights = Array(3).fill(Array(3).fill(false));
                for (let i of [a, b, c]) {
                    const j = i % 3;
                    i = Math.floor(i % 3);
                    highlights[i][j] = true;
                    this.setState({...this.state, highlights: highlights});
                }
                return cells[a]
            }
        }
        return null;
    }

    squareClicked(i, j) {
        const rows = this.state.rows.slice().map(row => row.slice());
        if (rows[i][j] != null) {
            alert('cell already marked this round!');
            return;
        }
        rows[i][j] = this.state.next;
        this.setState((state) => ({
            ...state,
            rows: rows,
            next: state.next === 'O' ? 'X' : 'O',
        }));
        const winner = this.winner(rows);
        if (winner != null) {
            new Promise(resolve => setTimeout(resolve, 200)).then(() => {
                alert(`${winner} won!`);
            });
            this.clear();
        }
        for (let i = 0; i < 3; i++) {
            for (let j = 0; j < 3; j++) {
                if (rows[i][j] == null) {
                    return;
                }
            }
        }
        alert("no slots left â€• it's a tie!");
        this.clear();
    }

    renderSquare(i, j) {
        return <Square
            onClick={() => this.squareClicked(i, j)}
            value={this.state.rows[i][j]} 
            highlight={this.state.highlights[i][j]} />;
    }

    render() {
        const status = `Next player: ${this.state.next}`;
        const boardRows = [...Array(3).keys()].map(i => {
            return (
                <div className="board-row">
                    {[...Array(3).keys()].map(j => this.renderSquare(i, j))}
                </div>
            );
        })
        return (
            <div>
                <div className="status">{status}</div>
                {boardRows}
            </div>
        );
    }
}

class Game extends React.Component {
  render() {
    return (
      <div className="game">
        <div className="game-board">
          <Board />
        </div>
        {
        // <div className="game-info">
        //   <div>{/* status */}</div>
        //   <ol>{/* TODO */}</ol>
        // </div>
        }
      </div>
    );
  }
}

// ========================================

ReactDOM.render(
  <Game />,
  document.getElementById('root')
);
